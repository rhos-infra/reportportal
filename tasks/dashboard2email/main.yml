---
- name: Prepare and restart reportportal_dashboard2email docker container
  community.docker.docker_container:
    state: started
    name: reportportal_dashboard2email
    image: centos
    network_mode: host
    command: bash
    # yamllint disable-line rule:line-length
    volumes: /var/lib/reportportal_dashboard2email:/var/lib/reportportal_dashboard2email
    tty: true
    restart: true
  tags: start_container
  # SAME task parameters have to be used in the
  # "stop reportportal_dashboard2email docker container" task

- name: Add reportportal_dashboard2email docker container to Ansible inventory
  ansible.builtin.add_host:
    name: reportportal_dashboard2email
    ansible_connection: docker
    ansible_user: root
  tags: always

- name: Setup reportportal_dashboard2email docker container
  delegate_to: reportportal_dashboard2email
  block:
    - name: Cleanup yum state (e.g. after unfinished package installations)
      ansible.builtin.command: yum-complete-transaction --cleanup-only
      tags: rpms
      changed_when: "'Complete!' not in command_result.stdout"

    - name: Install Xvfb, vncserver, firefox and other deps
      ansible.builtin.yum:
        name: "{{ item }}"
        state: present
      with_items:
        # required for the code in lib/dashboard2email.py
        - ansible
        - Xvfb
        - firefox
        - tigervnc-server
        # for the likes of 'killall' commands etc
        - psmisc
      register: install_rpms
      retries: 3
      delay: 5
      until: install_rpms.rc == 0
      tags: rpms

    - name: Install pip using get-pip.py
      ansible.builtin.command:
        echo get-pip; curl https://bootstrap.pypa.io/get-pip.py | python
      tags: rpms
      changed_when: "'Complete!' not in command_result.stdout"

    - name: Install selenium (via pip)
      ansible.builtin.pip:
        name: selenium
        state: present
      tags: rpms

    - name: Check is geckodriver installed
      ansible.builtin.stat:
        path: /usr/local/bin/geckodriver
      register: geckodriver_exist
      tags: geckodriver

    - name: Install geckodriver (Selenium python lib to work with Firefox)
      ansible.builtin.unarchive:
        remote_src: true
        # yamllint disable-line rule:line-length
        src: https://github.com/mozilla/geckodriver/releases/download/v0.21.0/geckodriver-v0.21.0-linux64.tar.gz
        dest: /usr/local/bin
      when: not geckodriver_exist.stat.exists or
            not geckodriver_exist.stat.executable
      tags: geckodriver

    - name: Generate and save machine's uuid (required by Firefox)
      ansible.builtin.shell: dbus-uuidgen > /etc/machine-id
      tags: machine_id
      changed_when: true

    - name: Clean /tmp/*
      ansible.builtin.shell: |
        rm -rf /tmp/* /tmp/.* || true
      changed_when: true

    - name: Clean mozilla profiles
      ansible.builtin.file:
        path: ~/.mozilla/
        state: absent

    - name: Clean vnc server settings and passwords
      ansible.builtin.file:
        path: ~/.vnc/
        state: absent
      tags: vnc

    - name: Setup vnc server password file
      ansible.builtin.shell: |
        set -o pipefail
        mkdir -p ~/.vnc/
        echo {{ other.vnc_password }} | vncpasswd -f > ~/.vnc/passwd
        chmod 600 ~/.vnc/passwd
      no_log: true
      tags: vnc
      changed_when: true

    - name: Create ~/.vnc/xstartup
      ansible.builtin.template:
        src: templates/xstartup.j2
        dest: "~/.vnc/xstartup"
        force: true
      mode: "0644"  # Set the desired file permissions (rw-r--r--)

    - name: Start vncserver in the background (DISPLAY=:10)
      ansible.builtin.shell: >
        vncserver :10 -name reportportal_dashboard2email -geometry 1920x1080
      tags: vnc
      warn: no-changed-when

    - name: Open and grab Dashboard + send it via email
      dashboard2email:
        display: ':10'
        url: "{{ other.url.address }}"
        user_name: 'dashboard2email'
        token: "{{ reportportal_token }}"
        email_server_name: "{{ other.email_server_name }}"
        email_server_port: "{{ other.email_server_port }}"
        email_from: "{{ other.email_from }}"
        email_to: "{{ other.email_to }}"
        email_subject: "{{ other.email_subject | default(omit) }}"
        email_body: "{{ other.email_body | default(omit) }}"
      ignore_errors: true
      environment:
        DISPLAY: ':10'
      register: dashboard2email_grab
      tags: grab


- name: Stop reportportal_dashboard2email docker container
  docker_container:
    state: stopped
    name: reportportal_dashboard2email
    image: centos
    network_mode: host
    command: bash
    # yamllint disable-line rule:line-length
    volumes: /var/lib/reportportal_dashboard2email:/var/lib/reportportal_dashboard2email
    tty: true
    restart: true
  tags: stop_container

- name: Fail if dashboard2email_grab not successful
  ansible.builtin.fail:
    msg: "dashboard2email_grab: {{ dashboard2email_grab }}"
  when: dashboard2email_grab.failed
  tags: grab
  delegate_to: reportportal_dashboard2email
